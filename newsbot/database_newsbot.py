from peewee import *
import builtins  # real global
import pickle


# (1) http://peewee.readthedocs.io/en/latest/peewee/database.html#deferring-initialization
# (2) https://stackoverflow.com/a/15959638
builtins.database_proxy = Proxy()  # add database_proxy to global namespace


# data manipulation class with table Article and manipulation functions
class DatabaseNewsBot(object):
    class BaseModel(Model):
        class Meta:
            database = builtins.database_proxy

    # ORM(Object Relational Mapping) class for converting data
    # between a relational database table Article and a Python class (using peewee)
    class Article(BaseModel):
        title = CharField(unique=True)  # title is unique
        provider = CharField()
        date = CharField()
        link = CharField(unique=True)  # its url is unique
        image = CharField()
        summary = TextField()
        text = TextField()
        subject = CharField()
        variation = IntegerField()
        redirect_link = CharField(unique=True)  # generated by uuid4 generator (possibly unique)
        clicks = IntegerField()

    # ORM class for binary objects
    class Object(BaseModel):
        id = PrimaryKeyField()  # auto-incrementing primary key
        algorithm = BlobField()
        params = BlobField()

    def __init__(self, db):
        self.db = db
        builtins.database_proxy.initialize(self.db)
        self.db.connect()
        self.empty_article_table = False
        self.empty_object_table = False
        if not self.Article.table_exists():
            self.Article.create_table()
            self.empty_article_table = True
        if not self.Object.table_exists():
            self.Object.create_table(fail_silently=True)
            self.empty_object_table = True

    def __del__(self):
        self.db.close()

    def insert_article(self, article, variation):
        element = self.Article.create(title=article.title, provider=article.provider,
                                      date=article.date, link=article.link,
                                      image=article.image, summary=article.summary,
                                      text=article.text, subject=article.subject,
                                      redirect_link=article.redirect_link, clicks=article.clicks,
                                      variation=variation)
        element.save()
        self.empty_article_table = False

    # path: sub-part of redirection link, excluding server_url (e.g., 0-6b81b880-e268-4748-8362-e6a8e646a30b)
    # get the original url of the article
    def get_link_and_update_clicks(self, path, clicks_increment=1):
        if self.empty_article_table:
            return None
        query = self.Article.select().where(self.Article.redirect_link.contains(path))
        for article in query:  # typically one article exists in 'query'
            article.clicks += clicks_increment
            article.save()
            return article.link
        return None

    def is_exist_article(self, title):
        if self.empty_article_table:
            return False
        query = self.Article.select().where(self.Article.title == title)
        return True if len(query) else False

    def insert_object(self, algorithm, params):
        # convert instances into pickle binaries
        element = self.Object.create(algorithm=pickle.dumps(algorithm),
                                     params=pickle.dumps(params))
        element.save()
        self.empty_object_table = False

    def get_latest_object(self):
        if self.empty_object_table:
            return None, None
        # https://stackoverflow.com/questions/24675271/python-peewee-get-last-saved-row
        element = self.Object.select().order_by(self.Object.id.desc()).get()
        return pickle.loads(element.algorithm), pickle.loads(element.params)
